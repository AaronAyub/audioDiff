#!/bin/sh
# A shell script that compares whether a set of audio files are identical.
# It takes at least two files that can be processed by ffmpeg as input.

# Print the help menu
help() {
    echo -e "Checks whether the audio content of a given set of files are identical.\n
usage: audioDiff [-h] [-p] {two or more audio or video files}\n
-h\tprint this help message
-p\tprint the audio hashes of each file"
    exit 0
}

# Parse options, then remove them from the arguments array
while getopts ":hp" arg
do
    case "$arg" in
        h)
            help
            ;;
        p)
            PRINTHASHES=1
            ;;
        ?)
            echo "Invalid option provided: -${OPTARG}"
            exit 1
            ;;
    esac
done
shift "$(($OPTIND-1))"

# Check for requirements
if ! [ -x "$(command -v ffmpeg)" ]
then
    echo "This script requires ffmpeg. Please install ffmpeg to use it."
    exit 1
fi

# Check for the presence of arguments
if [ $# -lt 2 ]
then
    echo "Please run this script with at least two files with audio that you would like to compare."
    exit 1
fi

for input in "$@"
do
    # Generate the hash of file content
    hash=$(ffmpeg -nostats -loglevel 0 -i "$input" -y -map 0:a -f hash -)
    if [ $? -ne 0 ]
    then
        echo "FFmpeg error. Script failed."
        exit 1
    fi
    [ $PRINTHASHES ] && echo "$input": "$hash"

    # Compare the hashes. If the -p option is not set, terminate early on a hash mismatch
    [ $first ] || first=$hash
    if [ $first != $hash ]
    then
        if [ $PRINTHASHES ]
        then
            NOTEQUAL=1
        else
            echo -e "\e[31mThe files are not equal.\e[0m"
            exit 0
        fi
    fi
done

# Warn the user of inequal files if the program hasn't terminated earlier.
if [ $NOTEQUAL ]
then
    echo -e "\e[31mThe files are not equal.\e[0m"
else
    echo -e "\e[32mThe file contents are identical.\e[0m"
fi